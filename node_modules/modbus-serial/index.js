const ModbusRTU = require("modbus-serial");
const client = new ModbusRTU();

// Function to connect to the Modbus server (PLC or PFC)
function connectModbus(ip, port) {
    return new Promise((resolve, reject) => {
        client.connectTCP(ip, { port: port })
            .then(() => {
                console.log(`Connected to Modbus server at ${ip}:${port}`);
                resolve();
            })
            .catch(err => {
                console.error(`Error connecting to Modbus server at ${ip}:${port}:`, err);
                reject(err);
            });
    });
}

// Function to read temperature data from a given sensor address
function readTemperature(sensorAddress) {
    return new Promise((resolve, reject) => {
        // Assuming temperature is a 16-bit register
        client.readHoldingRegisters(sensorAddress, 1)
            .then(data => {
                // Convert register data to temperature value
                const temperature = data.data[0]; // Placeholder for actual conversion logic
                console.log(`Temperature read from sensor ${sensorAddress}:`, temperature);
                resolve(temperature);
            })
            .catch(err => {
                console.error(`Error reading temperature from sensor ${sensorAddress}:`, err);
                reject(err);
            });
    });
}

// Function to write temperature threshold to a sensor
function writeTemperatureThreshold(sensorAddress, threshold) {
    return new Promise((resolve, reject) => {
        // Assuming threshold is a 16-bit value
        client.writeRegister(sensorAddress, threshold)
            .then(() => {
                console.log(`Temperature threshold ${threshold} written to sensor ${sensorAddress}`);
                resolve();
            })
            .catch(err => {
                console.error(`Error writing temperature threshold to sensor ${sensorAddress}:`, err);
                reject(err);
            });
    });
}

// Export the functions for use in other modules
module.exports = {
    connectModbus,
    readTemperature,
    writeTemperatureThreshold
};